#TouhouDanmakufu[Single]
#ScriptVersion[3]
#Title["Attack 3"]
#Text[""] 
#include "script/default_system/Default_ShotConst.txt"
#include "./functions/CustomShotFunctions.dnh"
#include "./functions/MathFunctions.dnh"
#include "./BlueSoul_Const.dnh"
#include "./functions/RenderFunctions.dnh"

let objEnemy;
let frame = 150;
let difficulty;

let px;
let py;

let w;
let h;

let ex;
let ey;

let cx;
let cy;

@Event
{
	alternative(GetEventType())
	case(EV_REQUEST_LIFE)
	{
		SetScriptResult(20000);
	}
	case(EV_REQUEST_TIMER)
	{
		SetScriptResult(50);
	}
}
@Initialize
{
	difficulty = GetCommonData("Difficulty", -1);

	objEnemy = ObjEnemy_Create(OBJ_ENEMY_BOSS);
	ObjEnemy_Regist(objEnemy);

	let imgExRumia = GetCurrentScriptDirectory() ~ "/img/blue_heart.png";
	ObjPrim_SetTexture(objEnemy, imgExRumia); 

	ObjSprite2D_SetSourceRect(objEnemy, 0, 0, 16, 16); 
	ObjSprite2D_SetDestCenter(objEnemy); 
	ObjRender_SetBlendType(objEnemy, BLEND_ALPHA);
	Obj_SetRenderPriority(objEnemy, 0.8);

	let cx = GetStgFrameWidth() / 2;

	ObjMove_SetX(objEnemy, cx);
	ObjMove_SetY(objEnemy, 90);

		w = GetStgFrameWidth();
	h = GetStgFrameHeight();

	ex = ObjMove_GetX(objEnemy);
	ey = ObjMove_GetY(objEnemy);

	Sweep();
}

@MainLoop
{

	frame++;

	px = GetPlayerX();
	py = GetPlayerY();

	w = GetStgFrameWidth();
	h = GetStgFrameHeight();

	ex = ObjMove_GetX(objEnemy);
	ey = ObjMove_GetY(objEnemy);
	
	cx = w / 2;
	cy = h / 2;

	if(frame > 220)
	{
		let angle_inc = 17 - difficulty * 2;
		let waves = 10 + difficulty;
		let wave_delay = 18 - difficulty * 2;
		DiamondShot(ex, ey, 3, GetAngleToPlayer(objEnemy), angle_inc, waves, wave_delay, CS_SMALL_BUTTERFLY, 0);

		frame = 0;
	}
	
	ObjEnemy_SetIntersectionCircleToShot(objEnemy, ex, ey, 32);
	ObjEnemy_SetIntersectionCircleToPlayer(objEnemy, ex, ey, 24);

	if(ObjEnemy_GetInfo(objEnemy, INFO_LIFE) <= 0)
	{
		Obj_Delete(objEnemy);
		CloseScript(GetOwnScriptID());
		return;
	}
	
	RenderHeart(w/2,h/2);
	
	yield;
}

task Sweep()
{
	let threads = 8 + difficulty * 2;
	let angle_inc = 8;
	let speed = 2;
	let rotate_delay = 14;
	let graphic = CS_LARGE_BUTTERFLY;

	let count = 0;
	let angle = 0;

	while(true)
	{
		ShootThreads(threads, w / 4, ey, speed, angle, graphic, 10);

		if(count > 5)
		{
			ShootThreads(threads, 3 * w / 4, ey, speed, angle, graphic, 10);
		}

		angle += angle_inc;

		count++;

		Wait(rotate_delay);

		if(count > 35)
		{
			Wait(120);
			count = 0;
		}
	}
}