#TouhouDanmakufu[Single]
#ScriptVersion[3]
#Title["Attack 3"]
#Text[""] 
#include "script/default_system/Default_ShotConst.txt"
#include "./functions/CustomShotFunctions.dnh"
#include "./functions/MathFunctions.dnh"
#include "./BlueSoul_Const.dnh"
#include "./functions/RenderFunctions.dnh"

let objEnemy;
let frame = 0;
let difficulty;

let px;
let py;

let w;
let h;

let ex;
let ey;

let cx;
let cy;

@Event
{
	alternative(GetEventType())
	case(EV_REQUEST_LIFE)
	{
		SetScriptResult(20000);
	}
	case(EV_REQUEST_TIMER)
	{
		SetScriptResult(50);
	}
}
@Initialize
{
	difficulty = GetCommonData("Difficulty", -1);

	objEnemy = ObjEnemy_Create(OBJ_ENEMY_BOSS);
	ObjEnemy_Regist(objEnemy);

	let imgExRumia = GetCurrentScriptDirectory() ~ "/img/blue_heart.png";
	ObjPrim_SetTexture(objEnemy, imgExRumia); 

	ObjSprite2D_SetSourceRect(objEnemy, 0, 0, 16, 16); 
	ObjSprite2D_SetDestCenter(objEnemy); 
	ObjRender_SetBlendType(objEnemy, BLEND_ALPHA);
	Obj_SetRenderPriority(objEnemy, 0.8);

	let cx = GetStgFrameWidth() / 2;

	ObjMove_SetX(objEnemy, cx);
	ObjMove_SetY(objEnemy, 90);

	px = GetPlayerX();
	py = GetPlayerY();

	w = GetStgFrameWidth();
	h = GetStgFrameHeight();

	ex = ObjMove_GetX(objEnemy);
	ey = ObjMove_GetY(objEnemy);
	
	cx = w / 2;
	cy = h / 2;

	AngledShots();
	WallShots();
	BackgroundShots();
}

@MainLoop
{

	frame++;

	px = GetPlayerX();
	py = GetPlayerY();

	w = GetStgFrameWidth();
	h = GetStgFrameHeight();

	ex = ObjMove_GetX(objEnemy);
	ey = ObjMove_GetY(objEnemy);
	
	cx = w / 2;
	cy = h / 2;
	
	ObjEnemy_SetIntersectionCircleToShot(objEnemy, ex, ey, 32);
	ObjEnemy_SetIntersectionCircleToPlayer(objEnemy, ex, ey, 24);

	if(ObjEnemy_GetInfo(objEnemy, INFO_LIFE) <= 0)
	{
		Obj_Delete(objEnemy);
		CloseScript(GetOwnScriptID());
		return;
	}
	
	RenderHeart(w/2,h/2);
	
	yield;
}

task WallShots()
{
	Wait(10);

	let graphic = CS_SMALL_DEBRIS;

	let speed = 1.6 + difficulty * 0.1;
	let period = 70 - difficulty * 5;
	let threads = 3;

	let count1 = 5;
	let overlap = 2;
	let angle_inc = 9;

	if(difficulty > 0)
	{
		overlap += 1;
	}

	let count2 = (360 - threads * count1 * angle_inc) / angle_inc / threads + overlap;

	while(true)
	{
		let angle = 90 - (count1 - 1) / 2 * angle_inc;

		loop(count1)
		{
			ShootThreads(threads, ex, ey, speed, angle, graphic, 10);

			angle += angle_inc;
		}

		Wait(period);

		angle -= overlap / 2 * angle_inc;

		loop(count2)
		{
			ShootThreads(threads, ex, ey, speed, angle, graphic, 10);

			angle += angle_inc;
		}

		Wait(period);
	}
}

task BackgroundShots()
{
	Wait(10);

	let graphic = CS_SMALL_BUTTERFLY;

	let speed = 2 + difficulty * 0.1;
	let period = 50 - difficulty * 5;
	let threads = 12 + difficulty * 2;
	let angle_inc = 360 / threads / 2.21;

	let angle = 0;

	while(true)
	{
		ShootThreads(threads, ex, ey, speed, angle, graphic, 10);

		angle += angle_inc;
		Wait(period);
	}
}

task AngledShots()
{
	Wait(10);

	let arc_x = ex;
	let arc_y = ey - 150;
	let r = 200;

	let speed = 2.5 + difficulty * 0.25;
	let speed_n = 3 + difficulty;
	let speed_inc = 0.2;
	let graphic = CS_LARGE_BUTTERFLY;
	let period = 30 - difficulty * 5;

	let angle_n = 12;
	let shot_turn = 70;
	let angle_diff = 30;

	let start_angle = angle_diff;
	let end_angle = 180 - angle_diff;
	let angle_inc = (end_angle - start_angle) / angle_n;

	while(true)
	{
		let angle = start_angle;

		loop(angle_n)
		{
			PlaySound("Shot4", 10, 40);

			let angle2 = ReflectY(angle);

			let x = arc_x + cos(angle) * r;
			let x2 = arc_x + cos(angle2) * r;
			let y = arc_y + sin(angle) * r;

			MultipleShots(x, y, speed, speed_n, speed_inc, angle + shot_turn, graphic);
			MultipleShots(x, y, speed, speed_n, speed_inc, angle - shot_turn, graphic);
			MultipleShots(x2, y, speed, speed_n, speed_inc, angle2 + shot_turn, graphic);
			MultipleShots(x2, y, speed, speed_n, speed_inc, angle2 - shot_turn, graphic);

			angle += angle_inc;

			Wait(period);
		}
	}
}