function RenderBox(x1, x2, y1, y2, colorr, colorg, colorb, blend_mode, priority)
{
	let box = ObjPrim_Create(OBJ_PRIMITIVE_2D);
	ObjPrim_SetPrimitiveType(box, PRIMITIVE_TRIANGLELIST);
	ObjPrim_SetVertexCount(box, 6);
	ObjRender_SetBlendType(box, blend_mode);
	Obj_SetRenderPriority(box, priority);
	
	ObjPrim_SetVertexPosition(box, 0, x1,y1,0);
	ObjPrim_SetVertexColor(box, 0, colorr,colorg,colorb);
	ObjPrim_SetVertexPosition(box, 1, x2,y1,0);
	ObjPrim_SetVertexColor(box, 1, colorr,colorg,colorb);
	ObjPrim_SetVertexPosition(box, 2, x1,y2,0);
	ObjPrim_SetVertexColor(box, 2, colorr,colorg,colorb);
	
	ObjPrim_SetVertexPosition(box, 3, x1,y2,0);
	ObjPrim_SetVertexColor(box, 3, colorr,colorg,colorb);
	ObjPrim_SetVertexPosition(box, 4, x2,y1,0);
	ObjPrim_SetVertexColor(box, 4, colorr,colorg,colorb);
	ObjPrim_SetVertexPosition(box, 5, x2,y2,0);
	ObjPrim_SetVertexColor(box, 5, colorr,colorg,colorb);
	
	return box;
}

function CreateTriangleStrip(vertices, rgb, blend_mode, priority)
{
	let objPoly = ObjPrim_Create(OBJ_PRIMITIVE_2D);
	ObjPrim_SetPrimitiveType(objPoly, PRIMITIVE_TRIANGLESTRIP);
	ObjRender_SetBlendType(objPoly, blend_mode);
	Obj_SetRenderPriority(objPoly, priority);
	
	ObjPrim_SetVertexCount(objPoly, length(vertices));
	
	let i = 0;
	while(i < length(vertices))
	{
		ObjPrim_SetVertexPosition(objPoly, i, vertices[i][0], vertices[i][1], 0);
		ObjPrim_SetVertexColor(objPoly, i, rgb[0], rgb[1], rgb[2]);
		
		i++;
	}
	
	return objPoly;
}

function CreatePointList(vertices, rgb, blend_mode, priority)
{
	let objPoly = ObjPrim_Create(OBJ_PRIMITIVE_2D);
	ObjPrim_SetPrimitiveType(objPoly, PRIMITIVE_POINT_LIST);
	ObjRender_SetBlendType(objPoly, blend_mode);
	Obj_SetRenderPriority(objPoly, priority);
	
	ObjPrim_SetVertexCount(objPoly, length(vertices));
	
	let i = 0;
	while(i < length(vertices))
	{
		ObjPrim_SetVertexPosition(objPoly, i, vertices[i][0], vertices[i][1], 0);
		ObjPrim_SetVertexColor(objPoly, i, rgb[0], rgb[1], rgb[2]);
		
		i++;
	}
	
	return objPoly;
}

function CreateCircle(x, y, r1, r2, quality, rgb, blend_mode, priority)
{
	let vertins = [];
	let vertouts = [];
	
	let angle = 0;
	let angleinc = 360 / (quality);
	
	let i = 0;
	loop(quality)
	{
		let vertx = floor(r1 * cos(angle) + x);
		let verty = floor(r1 * sin(angle) + y);
		vertins = vertins ~ [[vertx,verty]];
		let vertx2 = floor(r2 * cos(angle) + x);
		let verty2 = floor(r2 * sin(angle) + y);
		vertouts = vertouts ~ [[vertx2,verty2]];
		
		i++;
		angle += angleinc;
	}
	
	vertins = vertins ~ [vertins[0]];
	vertouts = vertouts ~ [vertouts[0]];
	
	let objBoxes = [];
	
	i = 0;
	while(i < length(vertins) - 1)
	{
		let point1 = [vertouts[i]];
		let point2 = [vertins[i]];
		let point3 = [vertouts[i+1]];
		let point4 = [vertins[i+1]];
		
		let objBox = CreateTriangleStrip(point1 ~ point2 ~ point3 ~ point4, rgb, blend_mode, priority);
		objBoxes = objBoxes ~ [objBox];
		
		i++;
	}
	
	return objBoxes;
}

task RenderHeart(x,y)
{
	let obj = ObjPrim_Create(OBJ_SPRITE_2D);
	ObjRender_SetBlendType(obj,BLEND_ADD_RGB);
	Obj_SetRenderPriority(obj, 1);
	ObjPrim_SetTexture(obj,GetCurrentScriptDirectory()~"/brokenheart.png");
	ObjSprite2D_SetSourceRect(obj,0,0,32,32);
	ObjSprite2D_SetDestCenter(obj);
	ObjRender_SetPosition(obj,floor(x),floor(y),1);
	
	loop(2)
	{
		yield;
	}
	
	Obj_Delete(obj);
}