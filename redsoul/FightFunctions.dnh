task RenderHealthBarOverTime(centerx,centery,width,height,oldvalue,newvalue,maxvalue,time,enddelay)
{
	let value = oldvalue;
	let valueinc = (newvalue - oldvalue) / time;
	
	loop(time)
	{
		value += valueinc;
		RenderHealthBar(centerx, centery, width, height, value, maxvalue);
		yield;
	}
	
	value = newvalue;
	
	loop(enddelay)
	{
		RenderHealthBar(centerx, centery, width, height, value, maxvalue);
		yield;
	}
	
}

task RenderHealthBar(centerx, centery, width, height, value, maxvalue)
{
	let xmin = centerx - width/2;
	let xmax = centerx + width/2;
	let ymin = centery - height/2;
	let ymax = centery + height/2;
	
	let xmid = xmin + (width * (value/maxvalue));
	
	RenderBox(xmin, xmid, ymin, ymax, 0, 255, 0);
	RenderBox(xmid, xmax, ymin, ymax, 255, 0, 0);
}

task RenderBox(x1, x2, y1, y2, colorr, colorg, colorb)
{
	let box = ObjPrim_Create(OBJ_PRIMITIVE_2D);
	ObjPrim_SetPrimitiveType(box, PRIMITIVE_TRIANGLELIST);
	ObjPrim_SetVertexCount(box, 6);
	
	ObjPrim_SetVertexPosition(box, 0, x1,y1,0);
	ObjPrim_SetVertexColor(box, 0, colorr,colorg,colorb);
	ObjPrim_SetVertexPosition(box, 1, x2,y1,0);
	ObjPrim_SetVertexColor(box, 1, colorr,colorg,colorb);
	ObjPrim_SetVertexPosition(box, 2, x1,y2,0);
	ObjPrim_SetVertexColor(box, 2, colorr,colorg,colorb);
	
	ObjPrim_SetVertexPosition(box, 3, x1,y2,0);
	ObjPrim_SetVertexColor(box, 3, colorr,colorg,colorb);
	ObjPrim_SetVertexPosition(box, 4, x2,y1,0);
	ObjPrim_SetVertexColor(box, 4, colorr,colorg,colorb);
	ObjPrim_SetVertexPosition(box, 5, x2,y2,0);
	ObjPrim_SetVertexColor(box, 5, colorr,colorg,colorb);
	
	loop(2)
	{
		yield;
	}
	
	Obj_Delete(box);
}

task HealBossBar(delay, delay2)
{
	Wait(delay2);

	let boss = GetEnemyBossObjectID()[0];
		let ex = ObjMove_GetX(boss);
		let ey = ObjMove_GetY(boss);

	loop(delay)
	{
		yield;
	}
	RenderHealthBarOverTime(ex,ey-40,100,20,0,20000, 20000, 50, 40);
}

function SliceEnemy()
{
	let boss = GetEnemyBossObjectID()[0];
	let ex = ObjMove_GetX(boss);
	let ey = ObjMove_GetY(boss);
	
	let sceneboss = GetEnemyBossSceneObjectID();
	
	let oldhealth = ObjEnemyBossScene_GetInfo(sceneboss, INFO_CURRENT_LIFE);
	let maxhealth = ObjEnemyBossScene_GetInfo(sceneboss, INFO_ACTIVE_STEP_TOTAL_MAX_LIFE);
	let damage = rand(damagemin,damagemax);
	AddScore(damage);
	ObjEnemy_AddLife(boss,-damage);
	let newhealth = oldhealth - damage;
	
	if(newhealth < 0)
	{
		newhealth = 0;
	}
	
	RenderSlice(ex,ey);
	PlaySound("Slice");
	DamageText(ex+36,ey-60,2,0.1,damage,50);
	RenderHealthBarOverTime(ex, ey-40, 100, 20, oldhealth, newhealth, maxhealth, 50, 40);
	if(oldhealth - damage < 1)
	{
		if(!GetCommonData("LastAttack", false))
		{
			HealBossBar(90, GetCommonData("HealDelay",0));
			SetCommonData("HealDelay",0);
		}
	}
}

task DamageText(x,y,upv,downa,damage,enddelay)
{
	let ory = y;

	let damagetext = IntToString(damage);
	let text = ObjText_Create();
	ObjText_SetText(text, damagetext);
	ObjText_SetFontType(text, "Hachicro");
	ObjText_SetFontColorTop(text, 255, 64, 64);
	ObjText_SetFontColorBottom(text, 255, 64 ,64);
	ObjText_SetFontSize(text, 24);
	ObjText_SetHorizontalAlignment(text, ALIGNMENT_CENTER);
	let width = 360;
	ObjText_SetMaxWidth(text, width);
	
	Obj_SetRenderPriority(text,1);
	ObjRender_SetX(text,x - width/2);
	ObjRender_SetY(text,y);

	y -= 1;
	
	while(y<ory)
	{
		ObjRender_SetY(text,y);
		yield;
		y-=upv;
		upv-=downa;
	}
	
	y = ory;
	
	loop(enddelay)
	{
		yield;
	}

	Obj_Delete(text);
}

task RenderSlice(x, y)
{
	let col = ButtonCollide(fight_x, fight_y);
	
	let i = 0;
	
	loop(7)
	{
		let path = GetCurrentScriptDirectory() ~ "/slice/slice_" ~ IntToString(i) ~ ".png";
		
		let obj = ObjPrim_Create(OBJ_SPRITE_2D);
		ObjRender_SetBlendType(obj, BLEND_ADD_RGB);
		Obj_SetRenderPriority(obj, 1);
		ObjPrim_SetTexture(obj, path);
		ObjSprite2D_SetSourceRect(obj, 0, 0, 26, 110);
		ObjSprite2D_SetDestCenter(obj);
		
		ObjRender_SetPosition(obj, x+30, y, 1);
		
		loop(6)
		{
			yield;
		}
		
		i++;
		Obj_Delete(obj);
	}
}